/* read datasets */

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os 
import statsmodels.api as sm

df2013 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2013_bootstrap_similarities.csv')
print(df2013)
df2014 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2014_bootstrap_similarities.csv')
print(df2014)
df2015 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2015_bootstrap_similarities.csv')
print(df2015)
df2016 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2016_bootstrap_similarities.csv')
print(df2016)
df2017 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2017_bootstrap_similarities.csv')
print(df2017)
df2018 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2018_bootstrap_similarities.csv')
print(df2018)
df2019 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2019_bootstrap_similarities.csv')
print(df2019)
df2020 = pd.read_csv('/Users/emily/Desktop/CAPSTONE/model/2020_bootstrap_similarities.csv')
print(df2020)

/* We calculated base words with the same theme using precision weighted averages (PWA)*/
/*In our study, we combined the terms 'metastatic', 'widely_metastatic', 'metastasis', 'mets', 'osseous_metastatic', 'metastasized', 'metastasize', 'oligometastatic', and 'nodal_metastasis' 
by using PWA to represent metastatic group, and developed cosine similarity scores of metastatic group and different palliative terms from 2013 to 2020.*/
-------------------------------------------------------------------------------------------------------------------
/* PWA for metastaics group and "pall*/

base_values = ["metastatic", "widely_metastatic", "metastasis", "mets", "osseous_metastatic", "metastasized",
               "metastasis", "metastasize", "oligometastatic", "nodal_metastasis"]
target_values = ['pall']

result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    df = pd.read_csv(file_path)
    df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
    df_result = df.groupby(['base', 'target']).agg(
        cosine_similarity=('score', 'mean'),
        sdk=('score', 'std')
    ).reset_index()
    df_result['ak'] = 1 / df_result['sdk']**2
    df_result['ak_cosine_similarity'] = df_result['cosine_similarity'] * df_result['ak']
    cosine_similarity = df_result['ak_cosine_similarity'].sum() / df_result['ak'].sum()
    result_dict[str(year)] = {'cosine_similarity': cosine_similarity}

result_df = pd.DataFrame(result_dict).transpose().reset_index()
result_df.columns = ['Year', 'cosine_similarity']
result_df['Year'] = pd.to_numeric(result_df['Year'])

# Print out the resulting DataFrame to see the cosine similarity for each year
print(result_df)

base_values = ["metastatic", "widely_metastatic", "metastasis", "mets", "osseous_metastatic", "metastasized",
               "metastasis", "metastasize", "oligometastatic", "nodal_metastasis"]
target_values = ['pall']

result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    df = pd.read_csv(file_path)
    df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
    df_result = df.groupby(['base', 'target']).agg(
        cosine_similarity=('score', 'mean'),
        sdk=('score', 'std')
    ).reset_index()
    df_result['ak'] = 1 / df_result['sdk']**2
    df_result['ak_cosine_similarity'] = df_result['cosine_similarity'] * df_result['ak']
    cosine_similarity = df_result['ak_cosine_similarity'].sum() / df_result['ak'].sum()
    result_dict[str(year)] = {'cosine_similarity': cosine_similarity}

result_df = pd.DataFrame(result_dict).transpose().reset_index()
result_df.columns = ['Year', 'cosine_similarity']
result_df['Year'] = pd.to_numeric(result_df['Year'])



/* cosine similarity between metastatics group and pall */
original_scores = {
    2013: 0.036399, 2014: 0.035071, 2015: 0.020434, 2016: 0.020822,
    2017: 0.048029, 2018: 0.048029, 2019: 0.032648, 2020: 0.028242
}
result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    if os.path.exists(file_path):
        df = pd.read_csv(file_path)
        df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
        sdk = df['score'].std()  
        cosine_similarity = original_scores[year] 
        se = sdk / np.sqrt(len(df)) 
        result_dict[str(year)] = {
            'Year': year,
            'cosine_similarity': cosine_similarity,
            'se': se,
            'ci_lower': cosine_similarity - 1.96 * se,
            'ci_upper': cosine_similarity + 1.96 * se
        }
    else:
        print(f"File not found for the year {year}: {file_path}")

# Converting the result_dict to a DataFrame
result_df = pd.DataFrame.from_dict(result_dict, orient='index')
X = sm.add_constant(result_df['Year'])
y = result_df['cosine_similarity']

# Fit the regression model
model = sm.OLS(y, X).fit()
print(model.summary())
x_values = np.linspace(result_df['Year'].min(), result_df['Year'].max(), 100)
y_values = model.predict(sm.add_constant(x_values))

plt.figure(figsize=(10, 6))
plt.plot(result_df['Year'], result_df['cosine_similarity'], marker='o', linestyle='-', color='blue', label='Cosine Similarity')
plt.fill_between(result_df['Year'], result_df['ci_lower'], result_df['ci_upper'], color='blue', alpha=0.2, label='95% Confidence Interval')
plt.plot(x_values, y_values, 'r--', label='Linear Regression Trendline')
plt.title('Relationship between metastatic terms and pall over time',fontsize=16)
plt.xlabel('Year',fontsize=16)
plt.ylabel('Similarity Score',fontsize=16)
plt.xticks(result_df['Year'].unique())
plt.grid(True)
plt.ylim(0, 0.3) 
plt.legend(fontsize=14)
plt.show()

/* PWA for metastaics group and "palliative*/
base_values = ["metastatic", "widely_metastatic", "metastasis", "mets", "osseous_metastatic", "metastasized",
               "metastasis", "metastasize", "oligometastatic", "nodal_metastasis"]
target_values = ['palliative']

result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    df = pd.read_csv(file_path)
    df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
    df_result = df.groupby(['base', 'target']).agg(
        cosine_similarity=('score', 'mean'),
        sdk=('score', 'std')
    ).reset_index()
    df_result['ak'] = 1 / df_result['sdk']**2
    df_result['ak_cosine_similarity'] = df_result['cosine_similarity'] * df_result['ak']
    cosine_similarity = df_result['ak_cosine_similarity'].sum() / df_result['ak'].sum()
    result_dict[str(year)] = {'cosine_similarity': cosine_similarity}

result_df = pd.DataFrame(result_dict).transpose().reset_index()
result_df.columns = ['Year', 'cosine_similarity']
result_df['Year'] = pd.to_numeric(result_df['Year'])

# Print out the resulting DataFrame to see the cosine similarity for each year
print(result_df)



/* cosine similarity between metastatics group and palliative */
original_scores = {
    2013: 0.171312, 2014: 0.153975, 2015: 0.148865, 2016: 0.148750,
    2017: 0.147520, 2018: 0.147882, 2019: 0.156465, 2020: 0.143670
}
result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    if os.path.exists(file_path):
        df = pd.read_csv(file_path)
        df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
        sdk = df['score'].std()  
        cosine_similarity = original_scores[year] 
        se = sdk / np.sqrt(len(df)) 
        result_dict[str(year)] = {
            'Year': year,
            'cosine_similarity': cosine_similarity,
            'se': se,
            'ci_lower': cosine_similarity - 1.96 * se,
            'ci_upper': cosine_similarity + 1.96 * se
        }
    else:
        print(f"File not found for the year {year}: {file_path}")

# Converting the result_dict to a DataFrame
result_df = pd.DataFrame.from_dict(result_dict, orient='index')
X = sm.add_constant(result_df['Year'])
y = result_df['cosine_similarity']

# Fit the regression model
model = sm.OLS(y, X).fit()
print(model.summary())
x_values = np.linspace(result_df['Year'].min(), result_df['Year'].max(), 100)
y_values = model.predict(sm.add_constant(x_values))

plt.figure(figsize=(10, 6))
plt.plot(result_df['Year'], result_df['cosine_similarity'], marker='o', linestyle='-', color='blue', label='Cosine Similarity')
plt.fill_between(result_df['Year'], result_df['ci_lower'], result_df['ci_upper'], color='blue', alpha=0.2, label='95% Confidence Interval')
plt.plot(x_values, y_values, 'r--', label='Linear Regression Trendline')
plt.title('Relationship between metastatic terms and palliative over time',fontsize=16)
plt.xlabel('Year',fontsize=16)
plt.ylabel('Similarity Score',fontsize=16)
plt.xticks(result_df['Year'].unique())
plt.grid(True)
plt.ylim(0, 0.3) 
plt.legend(fontsize=14)
plt.show()


/* PWA for metastaics group and "palliate*/

base_values = ["metastatic", "widely_metastatic", "metastasis", "mets", "osseous_metastatic", "metastasized",
               "metastasis", "metastasize", "oligometastatic", "nodal_metastasis"]
target_values = ['palliate']

result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    df = pd.read_csv(file_path)
    df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
    df_result = df.groupby(['base', 'target']).agg(
        cosine_similarity=('score', 'mean'),
        sdk=('score', 'std')
    ).reset_index()
    df_result['ak'] = 1 / df_result['sdk']**2
    df_result['ak_cosine_similarity'] = df_result['cosine_similarity'] * df_result['ak']
    cosine_similarity = df_result['ak_cosine_similarity'].sum() / df_result['ak'].sum()
    result_dict[str(year)] = {'cosine_similarity': cosine_similarity}

result_df = pd.DataFrame(result_dict).transpose().reset_index()
result_df.columns = ['Year', 'cosine_similarity']
result_df['Year'] = pd.to_numeric(result_df['Year'])

# Print out the resulting DataFrame to see the cosine similarity for each year
print(result_df)




/* cosine similarity between metastatics group and palliate */
original_scores = {
    2013: 0.069979, 2014: 0.100197, 2015: 0.065813, 2016: 0.046110,
    2017: 0.066363, 2018: 0.060823, 2019: 0.053083, 2020: 0.060476
}
result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    if os.path.exists(file_path):
        df = pd.read_csv(file_path)
        df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
        sdk = df['score'].std()  
        cosine_similarity = original_scores[year] 
        se = sdk / np.sqrt(len(df)) 
        result_dict[str(year)] = {
            'Year': year,
            'cosine_similarity': cosine_similarity,
            'se': se,
            'ci_lower': cosine_similarity - 1.96 * se,
            'ci_upper': cosine_similarity + 1.96 * se
        }
    else:
        print(f"File not found for the year {year}: {file_path}")

# Converting the result_dict to a DataFrame
result_df = pd.DataFrame.from_dict(result_dict, orient='index')
X = sm.add_constant(result_df['Year'])
y = result_df['cosine_similarity']

# Fit the regression model
model = sm.OLS(y, X).fit()
print(model.summary())
x_values = np.linspace(result_df['Year'].min(), result_df['Year'].max(), 100)
y_values = model.predict(sm.add_constant(x_values))

plt.figure(figsize=(10, 6))
plt.plot(result_df['Year'], result_df['cosine_similarity'], marker='o', linestyle='-', color='blue', label='Cosine Similarity')
plt.fill_between(result_df['Year'], result_df['ci_lower'], result_df['ci_upper'], color='blue', alpha=0.2, label='95% Confidence Interval')
plt.plot(x_values, y_values, 'r--', label='Linear Regression Trendline')
plt.title('Relationship between metastatic terms and palliate over time',fontsize=16)
plt.xlabel('Year',fontsize=16)
plt.ylabel('Similarity Score',fontsize=16)
plt.xticks(result_df['Year'].unique())
plt.grid(True)
plt.ylim(0, 0.3) 
plt.legend(fontsize=14)
plt.show()



/* PWA for metastaics group and "palliation*/
base_values = ["metastatic", "widely_metastatic", "metastasis", "mets", "osseous_metastatic", "metastasized",
               "metastasis", "metastasize", "oligometastatic", "nodal_metastasis"]
target_values = ['palliation']

result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    df = pd.read_csv(file_path)
    df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
    df_result = df.groupby(['base', 'target']).agg(
        cosine_similarity=('score', 'mean'),
        sdk=('score', 'std')
    ).reset_index()
    df_result['ak'] = 1 / df_result['sdk']**2
    df_result['ak_cosine_similarity'] = df_result['cosine_similarity'] * df_result['ak']
    cosine_similarity = df_result['ak_cosine_similarity'].sum() / df_result['ak'].sum()
    result_dict[str(year)] = {'cosine_similarity': cosine_similarity}

result_df = pd.DataFrame(result_dict).transpose().reset_index()
result_df.columns = ['Year', 'cosine_similarity']
result_df['Year'] = pd.to_numeric(result_df['Year'])

# Print out the resulting DataFrame to see the cosine similarity for each year
print(result_df)


/* cosine similarity between metastatics group and palliation */
original_estimates = {
    '2013': 0.159403, '2014': 0.175333, '2015': 0.142822, '2016': 0.129618,
    '2017': 0.141051, '2018': 0.108406, '2019': 0.107693, '2020': 0.110798
}
result_dict = {}

for year in range(2013, 2021):
    file_path = f"/Users/emily/Desktop/CAPSTONE/model/{year}_bootstrap_similarities.csv"
    if os.path.exists(file_path):
        df = pd.read_csv(file_path)
        df = df[df['base'].isin(base_values) & df['target'].isin(target_values)]
        sdk = df['score'].std()  
        cosine_similarity = original_scores[year] 
        se = sdk / np.sqrt(len(df)) 
        result_dict[str(year)] = {
            'Year': year,
            'cosine_similarity': cosine_similarity,
            'se': se,
            'ci_lower': cosine_similarity - 1.96 * se,
            'ci_upper': cosine_similarity + 1.96 * se
        }
    else:
        print(f"File not found for the year {year}: {file_path}")

# Converting the result_dict to a DataFrame
result_df = pd.DataFrame.from_dict(result_dict, orient='index')
X = sm.add_constant(result_df['Year'])
y = result_df['cosine_similarity']

# Fit the regression model
model = sm.OLS(y, X).fit()
print(model.summary())
x_values = np.linspace(result_df['Year'].min(), result_df['Year'].max(), 100)
y_values = model.predict(sm.add_constant(x_values))

plt.figure(figsize=(10, 6))
plt.plot(result_df['Year'], result_df['cosine_similarity'], marker='o', linestyle='-', color='blue', label='Cosine Similarity')
plt.fill_between(result_df['Year'], result_df['ci_lower'], result_df['ci_upper'], color='blue', alpha=0.2, label='95% Confidence Interval')
plt.plot(x_values, y_values, 'r--', label='Linear Regression Trendline')
plt.title('Relationship between metastatic terms and palliation over time',fontsize=16)
plt.xlabel('Year',fontsize=16)
plt.ylabel('Similarity Score',fontsize=16)
plt.xticks(result_df['Year'].unique())
plt.grid(True)
plt.ylim(0, 0.3) 
plt.legend(fontsize=14)
plt.show()
